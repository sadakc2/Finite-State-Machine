/*
NAME: Christina Sadak
DUE DATE: 10/25/2018
CLASS: CSCI 371
PROGRAM: 2
PURPOSE: Finite State Machine that accepts variables,    integers,    various mathematical and relational operators,    miscellaneous characters
         and reserved words and then outputs the appropriate code depending on the input.
IMPORTANT COMMENT: This program works under the assumption that every token will be separated by whitespace except for the semicolon token.
                   It also assumes that if two tokens weren't shown in the word document for the assignment that they could be put together
                   (for example, '>' and '=' is noted that it has a different code for '>='. Whereas '++' is invalid since we are only told that '+' has a status code)
*/

#include<iostream>
#include<cstdlib>
#include<fstream>
#include<string>
#include<cstring>
#include<string>
using namespace std;

int main()
{

  cout<<"Welcome to CSCI 371 Program 2!"<<endl;
  cout<<endl;

  //POPULATING categoryArray
  int categoryArray[256];//declares an array of size 256 because there are a total of 256 possibilites that could be entered (ascii table)

  for(int i=0; i<256; i++)//sets all values in the array to -1 because most entries will be invaluid.
  {
    categoryArray[i] = 34;//invalid stuff
  }
  //set valid tokens to their correct category number
  for(int i='A'; i<='Z'; i++)
  {
    categoryArray[i] = 0;//variable category code for C,   J,   K,   Q,   U,   V,   X,   Y,   Z
  }
  for(int i=48; i<58; i++)
  {
    categoryArray[i] = 1;//number category code
  }
  categoryArray['_'] = 0;//underscores belong in variables only
  categoryArray['%'] = 0;//percents belong in variables only
  categoryArray['+'] = 2;
  categoryArray['-'] = 3;
  categoryArray['<'] = 4;
  categoryArray['>'] = 5;
  categoryArray['='] = 6;
  categoryArray['!'] = 7;
  categoryArray['&'] = 8;
  categoryArray['|'] = 9;
  categoryArray[';'] = 10;
  categoryArray[39] = 11;//apostrophe
  categoryArray[':'] = 12;
  categoryArray['?'] = 13;
  categoryArray['^'] = 14;
  categoryArray['.'] = 32;
  categoryArray['A'] = 15;
  categoryArray['B'] = 16;
  categoryArray['D'] = 17;
  categoryArray['E'] = 18;
  categoryArray['F'] = 19;
  categoryArray['G'] = 20;
  categoryArray['H'] = 21;
  categoryArray['I'] = 22;
  categoryArray['L'] = 23;
  categoryArray['M'] = 24;
  categoryArray['N'] = 25;
  categoryArray['O'] = 26;
  categoryArray['P'] = 27;
  categoryArray['R'] = 28;
  categoryArray['S'] = 29;
  categoryArray['T'] = 30;
  categoryArray['W'] = 31;
  categoryArray[10] = 33;//new line
  categoryArray[13] = 33;//alternative new line ascii
  categoryArray[32] = 33;//space

  //DONE POPULATING categoryArray

  //POPULATING FSTArray
  int FSTArray[69][35] =
    {
    //0
    {1,   40,   59,   60,   61,   44,   63,   48,   53,   46,   2,   56,   57,   55,   43,   1,   11,   1,   16,   64,   1,   1,   19,   1,   1,   1,   1,   4,   36,   1,   27,   31,   41,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   1,   68,   2,   68,   68,   68 ,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   5,   1,   1,   1,   68,   0,   68},

    //5
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   6,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   7,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   8,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   9,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   10,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},

    //10
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   12,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   13,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   14,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   15,   1,   1,   1,   1,   1,   1,   68,   0,   68},

    //15
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   50,   1,   17,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   18,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   20,   1,   1,   1,   1,   1,   21,   1,   1,   1,   1,   1,   1,   68,   0,   68},

    //20
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   22,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   23,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   24,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   25,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},

    //25
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   26,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   28,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   29,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   30,   1,   1,   1,   1,   1,   1,   68,   0,   68},

    //30
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   32,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   33,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   34,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   35,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},

    //35
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   37,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   38,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   39,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},

    //40
    {68,   40,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   41,   0,   68},
    {68,   42,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   42,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   45,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},

    //45
    {68,   68,   68,   68,   68,   68,   45,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   68,   68,   68,   47,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   68,   68,   68,   47,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   49,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   49,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},

    //50
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   51,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   52,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   68,   68,   54,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},

    //55
    {68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   58,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},

    //60
    {68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   62,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   65,   1,   1,   1,   1,   1,   68,   0,   68},

    //65
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   66,   1,   1,   1,   68,   0,   68},
    {1,   1,   68,   68,   68,   68,   68,   68,   68,   68,   2,   68,   68,   68,   68,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   68,   0,   68},
    {1,   40,   59,   60,   61,   44,   63,   48,   53,   46,   2,   56,   57,   55,   43,   1,   11,   1,   16,   64,   1,   1,   19,   1,   1,   1,   1,   4,   36,   1,   27,   31,   41,   0,   68},
    {68,  68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,   68}
    };

    //DONE POPULATING FSTArray

      //POPULATING ActionTable
      int ActionTable[69][35] =
        {
        //0
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   401,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   401,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   600,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   600,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},

        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},

        //10
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   501,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   501,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},

        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   502,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   502,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   503,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   503,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},

        //20
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   504,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   504,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},

        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   508,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   508,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},

         //30
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   505,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   505,  -1},//30
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},

        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   507,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   507,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   509,  -1},

        //40
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   200,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   200,  -1},//40
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   200,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   200,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   200,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   200,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   406,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   406,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   304,  -1},

        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   308,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   600,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   600,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   310,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   600,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   600,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   306,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   306,  -1},

        //50
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},//50
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   600,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   600,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   309,  -1},

        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   405,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   402,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   402,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   404,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   404,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   403,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   403,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   301,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   301,  -1},

        //60
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   302,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   303,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   307,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   307,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   305,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},

        //65
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   510,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   510,  -1},   //66
        {-1,   -1,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1},
        {-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   600,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   600,  -1}
        };

        //DONE POPULATING ActionTable


  //read in from file test.txt
  ifstream inputFile;
  string inputString;
  char fileName[20];

  cout<<"Please enter the name of the file you would list to use: ";
  cin>>fileName;
  inputFile.open(fileName,ios::in);//uses the file the user entered for input

  if(inputFile.fail())//checks to make sure opening the file did not fail
  {
    cout<<"Error opening file. Exiting."<<endl;
    exit(EXIT_FAILURE);
  }

  cout<<"File successfully opened. Continuing."<<endl;
  cout<<endl;

  int x=0;
  int state;
  int categoryCode;
  char character;
  int actionCode;

    state=0;//start state
    categoryCode = categoryArray[character];

    while(getline(inputFile, inputString))//while in same token
    {
      //put a new lline character because getline doesn't see it
      inputString = inputString + ' ';

      for(int i=0; i<inputString.length(); i++)
      {
      character = inputString[i];//gets the current character
      cout<<character;
      categoryCode = categoryArray[character];
      actionCode = ActionTable[state][categoryCode];

    //switch statement to output the correct token value
    switch(actionCode)
    {
      //don't know what the token is yet
      case -1:
        //do nothing
        break;
      default:
        cout<<actionCode<<endl;
        break;
    }//end of switch

    state = FSTArray[state][categoryCode];//gets new state

  }//end of for

}//end of while
cout<<endl;

return 0;
}
